import * as CANNON from 'cannon-es'

export default class Physics {
    constructor() {
        // Crear el mundo fÃ­sico
        this.world = new CANNON.World()
        this.world.gravity.set(0, -12, 0)
        
        // Broadphase eficiente
        this.world.broadphase = new CANNON.SAPBroadphase(this.world)
        this.world.allowSleep = true
        
        // ðŸ”§ ConfiguraciÃ³n de solver mÃ¡s estable y suave
        this.world.solver.iterations = 12 // ðŸ”§ Aumentado de 10 a 12 para mÃ¡s precisiÃ³n
        this.world.solver.tolerance = 0.005 // ðŸ”§ MÃ¡s preciso: de 0.01 a 0.005
        
        // âœ… Material por defecto
        this.defaultMaterial = new CANNON.Material('default')
        const defaultContact = new CANNON.ContactMaterial(
            this.defaultMaterial,
            this.defaultMaterial,
            {
                friction: 0.25, // ðŸ”§ Ligeramente mÃ¡s fricciÃ³n: 0.2 â†’ 0.25
                restitution: 0.0 // ðŸ”§ Completamente sin rebote
            }
        )
        this.world.defaultContactMaterial = defaultContact
        this.world.addContactMaterial(defaultContact)
        
        // âœ… Materiales personalizados
        this.robotMaterial = new CANNON.Material('robot')
        this.obstacleMaterial = new CANNON.Material('obstacle')
        this.wallMaterial = new CANNON.Material('wall')
        
        // ðŸ”§ Contacto robot vs obstÃ¡culos - Optimizado para deslizamiento
        const robotObstacleContact = new CANNON.ContactMaterial(
            this.robotMaterial,
            this.obstacleMaterial,
            {
                friction: 0.2,                         // ðŸ”§ Menos fricciÃ³n para deslizar: 0.35 â†’ 0.2
                restitution: 0.0,                      // ðŸ”§ Completamente sin rebote
                contactEquationStiffness: 5e5,         // ðŸ”§ Mucho menos rÃ­gido: 8e5 â†’ 5e5
                contactEquationRelaxation: 20,         // ðŸ”§ Muy suave: 12 â†’ 20
                frictionEquationStiffness: 5e4,        // ðŸ”§ Menos rÃ­gido: 8e4 â†’ 5e4
                frictionEquationRelaxation: 20         // ðŸ”§ Muy suave: 12 â†’ 20
            }
        )
        this.world.addContactMaterial(robotObstacleContact)
        
        // ðŸ”§ Contacto robot vs muros - Optimizado para colisiones graduales
        const robotWallContact = new CANNON.ContactMaterial(
            this.robotMaterial,
            this.wallMaterial,
            {
                friction: 0.25,                        // ðŸ”§ Menos fricciÃ³n: 0.4 â†’ 0.25
                restitution: 0.0,                      // ðŸ”§ Sin rebote
                contactEquationStiffness: 4e5,         // ðŸ”§ Mucho menos rÃ­gido: 7e5 â†’ 4e5
                contactEquationRelaxation: 25,         // ðŸ”§ Extremadamente suave: 15 â†’ 25
                frictionEquationStiffness: 4e4,        // ðŸ”§ Menos rÃ­gido: 7e4 â†’ 4e4
                frictionEquationRelaxation: 25         // ðŸ”§ Extremadamente suave: 15 â†’ 25
            }
        )
        this.world.addContactMaterial(robotWallContact)
        
        // ðŸ”§ Contacto obstÃ¡culo vs obstÃ¡culo
        const obstacleContact = new CANNON.ContactMaterial(
            this.obstacleMaterial,
            this.obstacleMaterial,
            {
                friction: 0.25,                        // ðŸ”§ MÃ¡s fricciÃ³n: 0.2 â†’ 0.25
                restitution: 0.0,                      // ðŸ”§ Sin rebote: 0.01 â†’ 0.0
                contactEquationStiffness: 1e7,
                contactEquationRelaxation: 5
            }
        )
        this.world.addContactMaterial(obstacleContact)
        
        console.log('ðŸ”§ Physics configurada con colisiones ultra-suaves')
    }
    
    update(delta) {
        // ðŸ”§ Paso de simulaciÃ³n mÃ¡s suave y estable
        const fixedTimeStep = 1 / 60
        const maxSubSteps = 4 // ðŸ”§ Aumentado de 3 a 4 para mÃ¡s suavidad
        
        this.world.step(fixedTimeStep, delta, maxSubSteps)
    }
}